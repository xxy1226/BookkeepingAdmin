<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
class Purchase extends CI_Controller{
    function __construct()
    {
        parent::__construct();
        $this->load->model('Purchase_model');
    } 

    /*
     * Listing of purchases
     */
    function index()
    {
        // Check login
        if (!$this->session->userdata('adlog')) {
            redirect('user/login');
        }
        
        $params['limit'] = RECORDS_PER_PAGE; 
        $params['offset'] = ($this->input->get('per_page')) ? $this->input->get('per_page') : 0;
        
        $config = $this->config->item('pagination');
        $config['base_url'] = site_url('purchase/index?');
        $config['total_rows'] = $this->Purchase_model->get_all_purchases_count();
        $this->pagination->initialize($config);

        $data['purchases'] = $this->Purchase_model->get_all_purchases($params);
        
        $data['_view'] = 'purchase/index';
        $this->load->view('layouts/main',$data);
    }

    /*
     * Adding a new purchase
     */
    function add()
    {   
        // Check login
        if (!$this->session->userdata('adlog')) {
            redirect('user/login');
        }
        
        $this->load->library('form_validation');

		$this->form_validation->set_rules('GST','GST','decimal|max_length[8]');
		$this->form_validation->set_rules('PST','PST','decimal|max_length[8]');
		$this->form_validation->set_rules('Total','Total','decimal|max_length[10]');
		$this->form_validation->set_rules('Memo','Memo','max_length[255]');
		$this->form_validation->set_rules('CardID','CardID','required');
		$this->form_validation->set_rules('StoreID','StoreID','required');
		
		if($this->form_validation->run())     
        {   
            $params = array(
				'CardID' => $this->input->post('CardID'),
				'StoreID' => $this->input->post('StoreID'),
				'Date' => $this->input->post('Date'),
				'GST' => $this->input->post('GST'),
				'PST' => $this->input->post('PST'),
				'Total' => $this->input->post('Total'),
				'Memo' => $this->input->post('Memo'),
            );
            
            $purchase_id = $this->Purchase_model->add_purchase($params);
            redirect('purchase/index');
        }
        else
        {
			$this->load->model('Card_model');
			$data['all_cards'] = $this->Card_model->get_all_cards();

			$this->load->model('Store_model');
			$data['all_stores'] = $this->Store_model->get_all_stores();
            
            $data['_view'] = 'purchase/add';
            $this->load->view('layouts/main',$data);
        }
    }  

    /*
     * Editing a purchase
     */
    function edit($PurchaseID)
    {   
        // Check login
        if (!$this->session->userdata('adlog')) {
            redirect('user/login');
        }
        
        // check if the purchase exists before trying to edit it
        $data['purchase'] = $this->Purchase_model->get_purchase($PurchaseID);
        
        if(isset($data['purchase']['PurchaseID']))
        {
            $this->load->library('form_validation');

			$this->form_validation->set_rules('GST','GST','decimal|max_length[8]');
			$this->form_validation->set_rules('PST','PST','decimal|max_length[8]');
			$this->form_validation->set_rules('Total','Total','decimal|max_length[10]');
			$this->form_validation->set_rules('Memo','Memo','max_length[255]');
			$this->form_validation->set_rules('CardID','CardID','required');
			$this->form_validation->set_rules('StoreID','StoreID','required');
		
			if($this->form_validation->run())     
            {   
                $params = array(
					'CardID' => $this->input->post('CardID'),
					'StoreID' => $this->input->post('StoreID'),
					'Date' => $this->input->post('Date'),
					'GST' => $this->input->post('GST'),
					'PST' => $this->input->post('PST'),
					'Total' => $this->input->post('Total'),
					'Memo' => $this->input->post('Memo'),
                );

                $this->Purchase_model->update_purchase($PurchaseID,$params);            
                redirect('purchase/index');
            }
            else
            {
				$this->load->model('Card_model');
				$data['all_cards'] = $this->Card_model->get_all_cards();

				$this->load->model('Store_model');
				$data['all_stores'] = $this->Store_model->get_all_stores();

                $data['_view'] = 'purchase/edit';
                $this->load->view('layouts/main',$data);
            }
        }
        else
            show_error('The purchase you are trying to edit does not exist.');
    } 

    /*
     * Deleting purchase
     */
    function remove($PurchaseID)
    {
        // Check login
        if (!$this->session->userdata('adlog')) {
            redirect('user/login');
        }
        
        $purchase = $this->Purchase_model->get_purchase($PurchaseID);

        // check if the purchase exists before trying to delete it
        if(isset($purchase['PurchaseID']))
        {
            $this->Purchase_model->delete_purchase($PurchaseID);
            redirect('purchase/index');
        }
        else
            show_error('The purchase you are trying to delete does not exist.');
    }
    
}

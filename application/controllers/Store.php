<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
class Store extends CI_Controller{
    function __construct()
    {
        parent::__construct();
        $this->load->model('Store_model');
    } 

    /*
     * Listing of stores
     */
    function index()
    {
        // Check login
        if (!$this->session->userdata('adlog')) {
            redirect('user/login');
        }
        
        $data['stores'] = $this->Store_model->get_all_stores();
        
        $data['_view'] = 'store/index';
        $this->load->view('layouts/main',$data);
    }

    /*
     * Adding a new store
     */
    function add()
    {   
        // Check login
        if (!$this->session->userdata('adlog')) {
            redirect('user/login');
        }
        
        $this->load->library('form_validation');

		$this->form_validation->set_rules('StoreName','StoreName','required|max_length[40]');
		$this->form_validation->set_rules('Web','Web','max_length[255]');
		$this->form_validation->set_rules('WorkTime','WorkTime','max_length[255]');
		$this->form_validation->set_rules('Address','Address','max_length[255]');
		$this->form_validation->set_rules('Icon','Icon','max_length[255]');
		
		if($this->form_validation->run())     
        {   
            $params = array(
				'Icon' => $this->input->post('Icon'),
				'StoreName' => $this->input->post('StoreName'),
				'Web' => $this->input->post('Web'),
				'Address' => $this->input->post('Address'),
				'WorkTime' => $this->input->post('WorkTime'),
            );
            
            $store_id = $this->Store_model->add_store($params);
            redirect('store/index');
        }
        else
        {            
            $data['_view'] = 'store/add';
            $this->load->view('layouts/main',$data);
        }
    }  

    /*
     * Editing a store
     */
    function edit($StoreID)
    {   
        // Check login
        if (!$this->session->userdata('adlog')) {
            redirect('user/login');
        }
        
        // check if the store exists before trying to edit it
        $data['store'] = $this->Store_model->get_store($StoreID);
        
        if(isset($data['store']['StoreID']))
        {
            $this->load->library('form_validation');

			$this->form_validation->set_rules('StoreName','StoreName','required|max_length[40]');
			$this->form_validation->set_rules('Web','Web','max_length[255]');
			$this->form_validation->set_rules('WorkTime','WorkTime','max_length[255]');
			$this->form_validation->set_rules('Address','Address','max_length[255]');
			$this->form_validation->set_rules('Icon','Icon','max_length[255]');
		
			if($this->form_validation->run())     
            {   
                $params = array(
					'Icon' => $this->input->post('Icon'),
					'StoreName' => $this->input->post('StoreName'),
					'Web' => $this->input->post('Web'),
					'Address' => $this->input->post('Address'),
					'WorkTime' => $this->input->post('WorkTime'),
                );

                $this->Store_model->update_store($StoreID,$params);            
                redirect('store/index');
            }
            else
            {
                $data['_view'] = 'store/edit';
                $this->load->view('layouts/main',$data);
            }
        }
        else
            show_error('The store you are trying to edit does not exist.');
    } 

    /*
     * Deleting store
     */
    function remove($StoreID)
    {
        // Check login
        if (!$this->session->userdata('adlog')) {
            redirect('user/login');
        }
        
        $store = $this->Store_model->get_store($StoreID);

        // check if the store exists before trying to delete it
        if(isset($store['StoreID']))
        {
            $this->Store_model->delete_store($StoreID);
            redirect('store/index');
        }
        else
            show_error('The store you are trying to delete does not exist.');
    }
    
}
